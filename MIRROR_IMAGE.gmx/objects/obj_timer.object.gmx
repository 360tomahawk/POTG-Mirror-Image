<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = (room_width * 0.01);
y = (room_height * 0.01);
FontSize = 1.5;

isPlaying = false;
weHaveIssues = false;
global.timeelapsedStage = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.TimerLimitSec -= (1/room_speed);
global.timeelapsedStage += (1/room_speed);

if(global.timeelapsedStage &gt; 45)
{
    weHaveIssues = true;
}
else
{
    weHaveIssues = false;
}

if(
room == rm_main_menu ||
room == rm_options_menu ||
room == rm_win ||
room == rm_end ||
room == rm_test ||
room == rm_template)
{
    global.fogged = false;
    instance_destroy();
}
        

if(isPlaying == false)
{
    audio_stop_sound(snd_mainmenu);
    if(global.TurnOnSound)
        {
        audio_play_sound(snd_ingame,0,true);
        }
    
        isPlaying = true;
}

if(global.TimerLimitSec &lt;= 0)
{
    global.TimerLimitSec = 0;
    room_goto(rm_end);
}

if(keyboard_check_pressed(ord("R")))
{
    if(isPlaying == true)
    {
        isPlaying = false;
        audio_stop_sound(snd_ingame);
    }
    weHaveIssues = false;
    global.fogged = false;
    global.timeelapsedStage = 0;
    room_restart();
}

if(global.fogged == true)
{
    if(!instance_exists(obj_worldfog))
    {
        instance_create(0,0,obj_worldfog);
    }
}
else
{
    if(instance_exists(obj_worldfog))
    {
        with(obj_worldfog)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cheat keys

if(keyboard_check_pressed(vk_numpad1))
{
    room_goto(rm_level1);
    global.fogged = false;
}
else if(keyboard_check_pressed(vk_numpad2))
{
    room_goto(rm_level2);
    global.fogged = false;
}
else if(keyboard_check_pressed(vk_numpad3))
{
    room_goto(rm_level3);
    global.fogged = false;
}
else if(keyboard_check_pressed(vk_numpad4))
{
    room_goto(rm_level4);
    global.fogged = false;
}
else if(keyboard_check_pressed(vk_numpad5))
{
    room_goto(rm_level5);
    global.fogged = false;
}
else if(keyboard_check_pressed(vk_numpad6))
{
    room_goto(rm_level6);
    global.fogged = false;
}
else if(keyboard_check_pressed(vk_add))
{
    global.TimerLimitSec = 800;
}
else if(keyboard_check_pressed(vk_subtract))
{
    global.TimerLimitSec = 5;
}
else if(keyboard_check_pressed(vk_multiply))
{
     scr_proceed_nxtLvL();
}


// room_goto(rm_level1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var timeLeft = "TimeLeft: " + string(round(global.TimerLimitSec));
draw_set_alpha(0.7);
draw_rectangle_colour(x,y,(string_length(timeLeft)*font_get_size(fnt_default)*0.5)+50,(font_get_size(fnt_default))+20,c_gray,c_gray,c_gray,c_gray,false);
draw_set_alpha(1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text_transformed_colour(x,y,timeLeft, 1,1,0,c_black,c_black,c_black,c_black,1);


if(weHaveIssues)
{               
    draw_set_halign(fa_middle);
    draw_set_valign(fa_middle);
    draw_text_transformed_colour(room_width/2, room_height/2, "Stuck? Press R to reset!", FontSize/2,FontSize/2,0,c_black,c_black,c_black,c_black,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
