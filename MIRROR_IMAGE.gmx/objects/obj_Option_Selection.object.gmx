<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zeOptionSelection = OptionsSelection.SOUND_VOL;
zeListOfStr[OptionsSelection.BACK] = "BACK";
zeListOfStr[OptionsSelection.SOUND_VOL] = "SOUND:";

FontSize = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_up))
{
    zeOptionSelection = max(zeOptionSelection-1, 0);
    if(global.TurnOnSound)
        {
        audio_play_sound(snd_selection,0,false);
        }
}

if (keyboard_check_pressed(vk_down))
{
    zeOptionSelection = min(zeOptionSelection+1, OptionsSelection.TOTAL_SELECTIONS-1);
    if(global.TurnOnSound)
        {
        audio_play_sound(snd_selection,0,false);
        }
}

if (keyboard_check_pressed(vk_enter))
{
    switch (zeOptionSelection)
    {
    case OptionsSelection.SOUND_VOL:
    {
        global.TurnOnSound = !global.TurnOnSound;
        if(!global.TurnOnSound)
        {
            sound_global_volume(0);
            audio_pause_all();
        }
        else
        {
            audio_play_sound(snd_selection,0,false);
            sound_global_volume(1);
            audio_resume_all();
        }
        break;
    }
    case OptionsSelection.BACK:
    {
        if(global.TurnOnSound)
        {
        audio_play_sound(snd_selection,0,false);
        }
        room_goto(rm_main_menu);
        break;
    }
    default:
    break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text_transformed_colour(room_width * 0.5, room_height*0.2, "OPTIONS", 2,2,0,c_lime,c_lime,c_lime,c_lime,1);

var num = 0;
var offSetYPosCount = 0;
var offSetYPos = 60;
repeat (OptionsSelection.TOTAL_SELECTIONS)
{
    //draw_text_transformed_colour(room_width*0.5,room_height*0.4+offSetYPos,zeListOfStr[num],FontSize,FontSize,0,c_lime,c_lime,c_lime,c_lime,1);
    switch (num)
    {
    case OptionsSelection.SOUND_VOL:
    {
        var zeStr = "TRUE";
        if (!global.TurnOnSound)
            zeStr = "FALSE";
        
      draw_text_transformed_colour(room_width*0.5,room_height*0.7+offSetYPosCount,zeListOfStr[num]+zeStr,FontSize,FontSize,0,c_lime,c_lime,c_lime,c_lime,1);      
    }
    break;
    
    default:
    draw_text_transformed_colour(room_width*0.5,room_height*0.7+offSetYPosCount,zeListOfStr[num],FontSize,FontSize,0,c_lime,c_lime,c_lime,c_lime,1);
    break;
    }
    ++num;
    offSetYPosCount += offSetYPos;
}

var zedefaultFontSize = font_get_size(fnt_default);
var offSet = 1.25;
var zeStrLength = offSet * (string_length(zeListOfStr[zeOptionSelection]) * FontSize * zedefaultFontSize * 0.5);
draw_sprite(spr_player,0,(room_width*0.5)-zeStrLength, (room_height*0.4) + (zeOptionSelection*offSetYPos));
draw_sprite(spr_oPlayer,0,(room_width*0.5)+zeStrLength, (room_height*0.4) + (zeOptionSelection*offSetYPos));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
