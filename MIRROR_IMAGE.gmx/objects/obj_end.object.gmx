<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("SaveFile.sav");
var playerScore = global.PlayerScore;
ListOfArrays[4] = 0;

if (ini_key_exists("Save","NumPlayers"))
{
    var num;  
    num = ini_read_real("Save", "NumPlayers",0);
    var needToCheckForPlayerScore = false;
    if (num &gt;= 5) 
        needToCheckForPlayerScore = true;
    else
        ListOfArrays[4] = playerScore;
    
    var numbersNeedToRepeat = num;
    repeat (num)
    {
        ListOfArrays[num-1] = ini_read_real("Save", string(num-1),0);
        --num;   
    }
    var CurrentLowestVal = ListOfArrays[0];
    var startCountingDown = 0;
    var whichPosToSwap;
    repeat (array_length_1d(ListOfArrays))
    {
        for (var zeNum = startCountingDown; zeNum &lt; array_length_1d(ListOfArrays); ++zeNum)
        {
            if (CurrentLowestVal &lt; ListOfArrays[zeNum])
            {
                CurrentLowestVal = ListOfArrays[zeNum];
                whichPosToSwap = zeNum;
            }
        }
        if (ListOfArrays[startCountingDown] &gt; CurrentLowestVal)
        {
            var toSwap = ListOfArrays[startCountingDown];
            ListOfArrays[startCountingDown] = CurrentLowestVal;
            ListOfArrays[whichPosToSwap] = toSwap;
        }
        ++startCountingDown;
    }
    if (needToCheckForPlayerScore)
    {
        for (var zeNum = 0; zeNum &lt; array_length_1d(ListOfArrays); ++zeNum)
        {
            if (playerScore &gt; ListOfArrays[zeNum])
            {
                var zeVal = ListOfArrays[zeNum];
                ListOfArrays[zeNum] = playerScore;
                for (var zeNum2 = zeNum+1; zeNum2 &lt; array_length_1d(ListOfArrays); ++zeNum2)
                {
                    var zeVal2 = zeVal;
                    zeVal = ListOfArrays[zeNum2];
                    ListOfArrays[zeNum2] = zeVal2;
                }
                break;
            }
        }
    }
}
else
{
    ListOfArrays[0] = playerScore;
}
ini_write_real("Save", "NumPlayers", array_length_1d(ListOfArrays));
for (var num = 0; num &lt; array_length_1d(ListOfArrays); ++num)
{
    ini_write_real("Save", string(num), ListOfArrays[num]);
}

//ini_section_delete('Save');
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_enter))
{
    room_goto(rm_main_menu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_restart_someVariables();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_middle);
var num = 0;
var howMuchOffset = 60;
var OffsetYPos = 0;
draw_text_transformed_colour(room_width*0.5,room_height*0.2,"THE END", 2,2,0,c_lime,c_lime,c_lime,c_lime,1);
draw_text_transformed_colour(room_width*0.5,room_height*0.3,"HIGHSCORE", 1,1,0,c_lime,c_lime,c_lime,c_lime,1);

repeat (array_length_1d(ListOfArrays))
{
    draw_text_transformed_colour(room_width*0.5,(room_height*0.4)+OffsetYPos, string(num+1) + ". " + string(ListOfArrays[num]), 1,1,0,c_lime,c_lime,c_lime,c_lime,1);
    OffsetYPos += howMuchOffset;
    ++num;
}

var theStr = "BACK TO MAIN MENU";
draw_text_transformed_colour(room_width*0.5,(room_height*0.4) + OffsetYPos, theStr,1,1,0,c_lime,c_lime,c_lime,c_lime,1);

var offSet = 0.4;
var zedefaultFontSize = font_get_size(fnt_default);
var zeStrLength = offSet * (string_length(theStr) * zedefaultFontSize * 0.5);
draw_sprite(spr_player,0,(room_width*0.5)-zeStrLength, (room_height*0.4) + OffsetYPos);
draw_sprite(spr_oPlayer,0,(room_width*0.5)+zeStrLength, (room_height*0.4) + OffsetYPos);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
